pipeline {
    agent any
    environment {
        TRIVY_VERSION = '0.50.0'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Lint') {
            steps {
                echo 'Linting Dockerfiles and Compose files...'
                sh 'docker run --rm -i hadolint/hadolint < Dockerfile || true'
                sh 'docker run --rm -v "${PWD}":/project cytopia/yamllint docker-compose.yml || true'
            }
        }
        stage('Build Docker Images') {
            steps {
                sh 'docker compose build'
            }
        }
        stage('Vulnerability Scan') {
            steps {
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${TRIVY_VERSION}
                for image in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>'); do
                  trivy image --exit-code 1 --severity HIGH,CRITICAL $image
                done
                '''
            }
        }
        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        echo 'Run unit tests (customize for your stack)...'
                        // Example: sh 'pytest tests/'
                    }
                }
                stage('Integration Tests') {
                    steps {
                        echo 'Run integration tests (customize for your stack)...'
                        // Example: sh './scripts/integration-test.sh'
                    }
                }
            }
        }
        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/test-results/**/*.xml', allowEmptyArchive: true
            }
        }
        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to production (customize for your environment)...'
                // Example: sh 'docker compose up -d'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Build failed! Sending notification (customize for your team)...'
            // Example: mail to: 'devops@example.com', subject: "Jenkins Build Failed", body: "Check Jenkins for details."
        }
    }
}
